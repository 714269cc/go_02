[short] skip

# Run go test -json on a contrived test suite that
# runs tests in parallel, some of which fail with
# output. We assert here that the t.Error logs
# are correctly attributed to the originating test
# cases by the test2json utility.
! go test -json -short -v parallel

# Check for run action
stdout '"Package":"parallel"'

# Check for correctly attributed log/failure output
stdout '"Action":"output","Package":"parallel","Test":"TestToUpper1/should_fail","Output":"    TestToUpper1/should_fail: parallel_test.go:32: strings.ToUpper\(\\"lower case\\"\) = \\"LOWER CASE\\"; want \\"lower case\\"\\n"}'
stdout '"Action":"output","Package":"parallel","Test":"TestToUpper2/should_fail","Output":"    TestToUpper2/should_fail: parallel_test.go:32: strings.ToUpper\(\\"lower case\\"\) = \\"LOWER CASE\\"; want \\"lower case\\"\\n"}'

# Check for run action via go tool test2json
go test -o $WORK/tmp/parallel.test$GOEXE -c parallel
! go tool test2json -p parallel $WORK/tmp/parallel.test$GOEXE -test.v
stdout '"Package":"parallel"'

# Check for correctly attributed log/failure output via go tool test2json
stdout '"Action":"output","Package":"parallel","Test":"TestToUpper1/should_fail","Output":"    TestToUpper1/should_fail: parallel_test.go:32: strings.ToUpper\(\\"lower case\\"\) = \\"LOWER CASE\\"; want \\"lower case\\"\\n"}'
stdout '"Action":"output","Package":"parallel","Test":"TestToUpper2/should_fail","Output":"    TestToUpper2/should_fail: parallel_test.go:32: strings.ToUpper\(\\"lower case\\"\) = \\"LOWER CASE\\"; want \\"lower case\\"\\n"}'

-- parallel/parallel_test.go --
package parallel

import (
	"strings"
	"testing"
)

func TestToUpper1(t *testing.T) { testToUpper(t) }
func TestToUpper2(t *testing.T) { testToUpper(t) }

func testToUpper(t *testing.T) {
	t.Parallel()

	cases := []struct{ name, in, want string }{
		{
			name: "should_pass",
			in:   "upper case",
			want: "UPPER CASE",
		},
		{
			name: "should_fail",
			in:   "lower case",
			want: "lower case",
		},
	}
	for _, tc := range cases {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()

			if got := strings.ToUpper(tc.in); got != tc.want {
				t.Errorf("strings.ToUpper(%q) = %q; want %q", tc.in, got, tc.want)
			}
		})
	}
}
