// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package log implements a simple logging package. It defines a type, Logger,
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// Every log message is output on a separate line: if the message being
// printed does not end in a newline, the logger will add one.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.
package log

import (
	"context"
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"sync/atomic"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// With the exception of the Lmsgprefix flag, there is no
// control over the order they appear (the order listed here)
// or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//	2009/01/23 01:23:23 message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	Lmsgprefix                    // move the "prefix" from the beginning of the line to before the message
	Llevel                        // logger level
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

type Level uint32

// These are the different logger levels. You can set the logger level
// on your instance of logger
const (
	NoneLevel Level = -(iota + 1)
	PanicLevel
	FatalLevel
	ErrorLevel
	WarnLevel
	InfoLevel
	DebugLevel
	TraceLevel
)

// These are level texts corresponding to logger levels.
var levelText = map[Level]string{
	// Print methods have none log level and they are considered as INFO by default.
	// This is the level text for the print methods.
	NoneLevel:  "INFO",
	PanicLevel: "PANIC",
	FatalLevel: "FATAL",
	ErrorLevel: "ERROR",
	WarnLevel:  "WARN",
	InfoLevel:  "INFO",
	DebugLevel: "DEBUG",
	TraceLevel: "TRACE",
}

// LevelText returns a text for the logger level. It returns the empty
// string if the level is unknown.
func LevelText(code Level) string {
	return levelText[code]
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu         sync.Mutex      // ensures atomic writes; protects the following fields
	prefix     string          // prefix on each line to identify the logger (but see Lmsgprefix)
	flag       int             // properties
	out        io.Writer       // destination for output
	buf        []byte          // for accumulating text to write
	isDiscard  int32           // atomic boolean: whether out == io.Discard
	level      Level           // logger level
	ctx        context.Context // logger context
	formatter  LoggerFormatter // logger formatter to format the log output
	rootLogger *Logger         // root logger for logger
	entryPool  sync.Pool       // entry pool
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line, or
// after the log header if the Lmsgprefix flag is provided.
// The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger {
	l := &Logger{out: out, prefix: prefix, flag: flag, level: DebugLevel}

	return l
}

// GetLogger returns a new Logger with a root logger and a different prefix.
// The logger will write the same output destination as the root logger.
// However, it has got a separate context and a logger level that can be configured.
func (l *Logger) GetLogger(prefix string) *Logger {
	rootLogger := l.RootLogger()

	if rootLogger == nil {
		rootLogger = l
	}

	return &Logger{prefix: prefix, rootLogger: rootLogger, level: DebugLevel}
}

// RootLogger returns the root logger for the logger.
func (l *Logger) RootLogger() *Logger {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.rootLogger
}

// WithContext creates an entry from the logger and adds a context to it.
func (l *Logger) WithContext(ctx context.Context) *Entry {
	entry := l.newEntry()
	entry.context = ctx
	return entry
}

// SetOutput sets the output destination for the logger.
// If the logger has got a root logger, the output destination will not be set
// because the output destination of the root logger is used.
func (l *Logger) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.rootLogger == nil {
		l.out = w
	}
}

var std = New(os.Stderr, "", LstdFlags)

// Default returns the standard logger used by the package-level output functions.
func Default() *Logger { return std }

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   * l.prefix (if it's not blank and Lmsgprefix is unset),
//   * date and/or time (if corresponding flags are provided),
//	 * log level (if corresponding flags are provided)
//   * file and line number (if corresponding flags are provided),
//   * l.prefix (if it's not blank and Lmsgprefix is set).
func (l *Logger) formatHeader(flag int, buf *[]byte, t time.Time, file string, line int, level Level) {
	if flag&Lmsgprefix == 0 {
		*buf = append(*buf, l.prefix...)
	}
	if flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if flag&LUTC != 0 {
			t = t.UTC()
		}
		if flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if flag&Llevel != 0 {
		*buf = append(*buf, fmt.Sprintf("%-5s ", levelText[level])...)
	}
	if flag&(Lshortfile|Llongfile) != 0 {
		if flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
	if flag&Lmsgprefix != 0 {
		*buf = append(*buf, l.prefix...)
	}
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.
func (l *Logger) Output(calldepth int, s string) error {
	return l.OutputLevel(NoneLevel, calldepth+1, s) // +1 for this frame
}

// OutputLevel writes the output for a logging event with level. The string s
// contains the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not already
// a newline. Calldepth is the count of the number of frames to skip when
// computing the file name and line number if Llongfile or Lshortfile is set;
// a value of 1 will print the details for the caller of Output. Level is the
// log level for the output. If any formatter is configured for the logger,
// it will be used to format the output.
func (l *Logger) OutputLevel(level Level, calldepth int, s string) error {
	var formatter LoggerFormatter

	l.mu.Lock()
	if l.rootLogger != nil {
		l.rootLogger.mu.Lock()
		formatter = l.rootLogger.formatter
		l.rootLogger.mu.Unlock()
	}
	if formatter == nil {
		formatter = l.formatter
	}
	l.mu.Unlock()

	if formatter != nil {
		entry := l.newEntry()
		entry.calldepth = calldepth + 1 // +1 for this frame
		entry.message = s
		entry.logger = l
		entry.context = nil
		entry.level = level

		serialized, err := formatter.Format(entry)

		if err == nil && serialized != nil {
			l.mu.Lock()
			if l.rootLogger != nil {
				l.rootLogger.mu.Lock()
				_, err = l.rootLogger.out.Write(serialized)
				l.rootLogger.mu.Unlock()
			} else {
				_, err = l.out.Write(serialized)
			}
			l.mu.Unlock()
		}

		l.releaseEntry(entry)
		return err
	}

	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()

	var flag int

	if l.rootLogger != nil {
		l.rootLogger.mu.Lock()
		flag = l.rootLogger.flag
		l.rootLogger.mu.Unlock()
	} else {
		flag = l.flag
	}

	if flag&Llevel != 0 {
		if level == NoneLevel && l.level < InfoLevel {
			return nil
		} else if level != NoneLevel && l.level < level {
			return nil
		}
	}

	if flag&(Lshortfile|Llongfile) != 0 {
		// Release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(flag, &l.buf, now, file, line, level)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}

	var err error
	if l.rootLogger != nil {
		l.rootLogger.mu.Lock()
		_, err = l.rootLogger.out.Write(l.buf)
		l.rootLogger.mu.Unlock()
	} else {
		_, err = l.out.Write(l.buf)
	}
	return err
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...interface{}) {
	if atomic.LoadInt32(&l.isDiscard) != 0 {
		return
	}
	l.OutputLevel(NoneLevel, 2, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Print(v ...interface{}) {
	if atomic.LoadInt32(&l.isDiscard) != 0 {
		return
	}
	l.OutputLevel(NoneLevel, 2, fmt.Sprint(v...))
}

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Println(v ...interface{}) {
	if atomic.LoadInt32(&l.isDiscard) != 0 {
		return
	}
	l.OutputLevel(NoneLevel, 2, fmt.Sprintln(v...))
}

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...interface{}) {
	l.OutputLevel(FatalLevel, 2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.OutputLevel(FatalLevel, 2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...interface{}) {
	l.OutputLevel(FatalLevel, 2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.OutputLevel(PanicLevel, 2, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.OutputLevel(PanicLevel, 2, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.OutputLevel(PanicLevel, 2, s)
	panic(s)
}

// Error is equivalent to Print() and logs the message at level Error.
func (l *Logger) Error(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.OutputLevel(ErrorLevel, 2, s)
}

// Errorf is equivalent to Printf() and logs the message at level Error.
func (l *Logger) Errorf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.OutputLevel(ErrorLevel, 2, s)
}

// Errorln is equivalent to Println() and logs the message at level Error.
func (l *Logger) Errorln(v ...interface{}) {
	l.OutputLevel(ErrorLevel, 2, fmt.Sprintln(v...))
}

// Warn is equivalent to Print() and logs the message at level Warning.
func (l *Logger) Warn(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.OutputLevel(WarnLevel, 2, s)
}

// Warnf is equivalent to Printf() and logs the message at level Warning.
func (l *Logger) Warnf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.OutputLevel(WarnLevel, 2, s)
}

// Warnln is equivalent to Println() and logs the message at level Warning.
func (l *Logger) Warnln(v ...interface{}) {
	l.OutputLevel(WarnLevel, 2, fmt.Sprintln(v...))
}

// Info is equivalent to Print() and logs the message at level Info.
func (l *Logger) Info(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.OutputLevel(InfoLevel, 2, s)
}

// Infof is equivalent to Printf() and logs the message at level Info.
func (l *Logger) Infof(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.OutputLevel(InfoLevel, 2, s)
}

// Infoln is equivalent to Println() and logs the message at level Info.
func (l *Logger) Infoln(v ...interface{}) {
	l.OutputLevel(InfoLevel, 2, fmt.Sprintln(v...))
}

// Debug is equivalent to Print() and logs the message at level Debug.
func (l *Logger) Debug(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.OutputLevel(DebugLevel, 2, s)
}

// Debugf is equivalent to Printf() and logs the message at level Debug.
func (l *Logger) Debugf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.OutputLevel(DebugLevel, 2, s)
}

// Debugln is equivalent to Println() and logs the message at level Debug.
func (l *Logger) Debugln(v ...interface{}) {
	l.OutputLevel(DebugLevel, 2, fmt.Sprintln(v...))
}

// Trace is equivalent to Print() and logs the message at level Trace.
func (l *Logger) Trace(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.OutputLevel(TraceLevel, 2, s)
}

// Tracef is equivalent to Printf() and logs the message at level Trace.
func (l *Logger) Tracef(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.OutputLevel(TraceLevel, 2, s)
}

// Traceln is equivalent to Println() and logs the message at level Trace.
func (l *Logger) Traceln(v ...interface{}) {
	l.OutputLevel(TraceLevel, 2, fmt.Sprintln(v...))
}

// Flags returns the output flags for the logger.
// The flag bits are Ldate, Ltime, and so on.
// If the logger has got a root logger, the output flags of the root
// logger are returned.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.rootLogger != nil {
		l.rootLogger.mu.Lock()
		defer l.rootLogger.mu.Unlock()
		return l.rootLogger.flag
	}
	return l.flag
}

// SetFlags sets the output flags for the logger.
// The flag bits are Ldate, Ltime, and so on.
// If the logger has got a root logger, the output flags will not be set
// because the output flags of the root logger is used.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.rootLogger == nil {
		l.flag = flag
	}
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// LoggerLevel returns the log level for the logger.
func (l *Logger) LoggerLevel() Level {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.level
}

// SetLoggerLevel sets the log level for the logger.
func (l *Logger) SetLoggerLevel(level Level) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.level = level
}

// Context returns the context for the logger.
func (l *Logger) Context() context.Context {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.ctx
}

// SetContext sets the context for the logger.
func (l *Logger) SetContext(ctx context.Context) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.ctx = ctx
}

// Formatter returns the formatter for the logger.
// If the logger has got a root logger, the formatter of the root
// logger is returned.
func (l *Logger) Formatter() LoggerFormatter {
	l.mu.Lock()
	defer l.mu.Unlock()

	if l.rootLogger != nil {
		l.rootLogger.mu.Lock()
		defer l.rootLogger.mu.Unlock()
		return l.rootLogger.formatter
	}

	return l.formatter
}

// SetFormatter sets the formatter for the logger.
// If the logger has got a root logger, the formatter will not be set
// because the formatter of the root logger is used.
func (l *Logger) SetFormatter(formatter LoggerFormatter) {
	l.mu.Lock()
	defer l.mu.Unlock()

	if l.rootLogger == nil {
		l.formatter = formatter
	}
}

// Writer returns the output destination for the logger.
// If the logger has got a root logger, the output destination
// of the root logger is returned.
func (l *Logger) Writer() io.Writer {
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.rootLogger != nil {
		return l.rootLogger.Writer()
	}
	return l.out
}

// newEntry either gets an entry from the pool or creates a new entry.
func (l *Logger) newEntry() *Entry {
	entry, ok := l.entryPool.Get().(*Entry)
	if ok {
		return entry
	}
	return NewEntry(l)
}

// releaseEntry puts the entry into the pool.
func (l *Logger) releaseEntry(entry *Entry) {
	l.entryPool.Put(entry)
}

// GetLogger returns a new Logger whose root logger is the standard logger.
// The logger will write the same output destination as the standard logger.
// However, it has got a separate context and a logger level that can be configured.
func GetLogger(prefix string) *Logger {
	return std.GetLogger(prefix)
}

// RootLogger returns the root logger of the standard logger.
func RootLogger() *Logger {
	return std.RootLogger()
}

// WithContext creates an entry from the standard logger and adds a context to it.
func WithContext(ctx context.Context) *Entry {
	return std.WithContext(ctx)
}

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer) {
	std.mu.Lock()
	defer std.mu.Unlock()
	std.out = w
}

// Flags returns the output flags for the standard logger.
// The flag bits are Ldate, Ltime, and so on.
func Flags() int {
	return std.Flags()
}

// SetFlags sets the output flags for the standard logger.
// The flag bits are Ldate, Ltime, and so on.
func SetFlags(flag int) {
	std.SetFlags(flag)
}

// Prefix returns the output prefix for the standard logger.
func Prefix() string {
	return std.Prefix()
}

// SetPrefix sets the output prefix for the standard logger.
func SetPrefix(prefix string) {
	std.SetPrefix(prefix)
}

// LoggerLevel returns the logger level for the standard logger.
func LoggerLevel() Level {
	return std.LoggerLevel()
}

// SetLoggerLevel sets the logger level for the standard logger.
func SetLoggerLevel(level Level) {
	std.SetLoggerLevel(level)
}

// Context returns the context for the standard logger.
func Context() context.Context {
	return std.Context()
}

// SetContext sets the context for the standard logger.
func SetContext(ctx context.Context) {
	std.SetContext(ctx)
}

// Formatter returns the logger formatter for the standard logger.
func Formatter() LoggerFormatter {
	return std.Formatter()
}

// SetFormatter sets the logger formatter for the standard logger.
func SetFormatter(formatter LoggerFormatter) {
	std.SetFormatter(formatter)
}

// Writer returns the output destination for the standard logger.
func Writer() io.Writer {
	return std.Writer()
}

// These functions write to the standard logger.

// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Print.
func Print(v ...interface{}) {
	if atomic.LoadInt32(&std.isDiscard) != 0 {
		return
	}
	std.OutputLevel(NoneLevel, 2, fmt.Sprint(v...))
}

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Printf(format string, v ...interface{}) {
	if atomic.LoadInt32(&std.isDiscard) != 0 {
		return
	}
	std.OutputLevel(NoneLevel, 2, fmt.Sprintf(format, v...))
}

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Println.
func Println(v ...interface{}) {
	if atomic.LoadInt32(&std.isDiscard) != 0 {
		return
	}
	std.OutputLevel(NoneLevel, 2, fmt.Sprintln(v...))
}

// Fatal is equivalent to Print() followed by a call to os.Exit(1).
func Fatal(v ...interface{}) {
	std.OutputLevel(FatalLevel, 2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).
func Fatalf(format string, v ...interface{}) {
	std.OutputLevel(FatalLevel, 2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).
func Fatalln(v ...interface{}) {
	std.OutputLevel(FatalLevel, 2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to Print() followed by a call to panic().
func Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.OutputLevel(PanicLevel, 2, s)
	panic(s)
}

// Panicf is equivalent to Printf() followed by a call to panic().
func Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.OutputLevel(PanicLevel, 2, s)
	panic(s)
}

// Panicln is equivalent to Println() followed by a call to panic().
func Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.OutputLevel(PanicLevel, 2, s)
	panic(s)
}

// Error logs a message at level Error on the standard logger.
func Error(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.OutputLevel(ErrorLevel, 2, s)
}

// Errorf logs a message at level Error on the standard logger.
func Errorf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.OutputLevel(ErrorLevel, 2, s)
}

// Errorln logs a message at level Error on the standard logger.
func Errorln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.OutputLevel(ErrorLevel, 2, s)
}

// Warn logs a message at level Warning on the standard logger.
func Warn(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.OutputLevel(WarnLevel, 2, s)
}

// Warnf logs a message at level Warning on the standard logger.
func Warnf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.OutputLevel(WarnLevel, 2, s)
}

// Warnln logs a message at level Warning on the standard logger.
func Warnln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.OutputLevel(WarnLevel, 2, s)
}

// Info logs a message at level Info on the standard logger.
func Info(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.OutputLevel(InfoLevel, 2, s)
}

// Infof logs a message at level Info on the standard logger.
func Infof(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.OutputLevel(InfoLevel, 2, s)
}

// Infoln logs a message at level Info on the standard logger.
func Infoln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.OutputLevel(InfoLevel, 2, s)
}

// Debug logs a message at level Debug on the standard logger.
func Debug(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.OutputLevel(DebugLevel, 2, s)
}

// Debugf logs a message at level Debug on the standard logger.
func Debugf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.OutputLevel(DebugLevel, 2, s)
}

// Debugln logs a message at level Debug on the standard logger.
func Debugln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.OutputLevel(DebugLevel, 2, s)
}

// Trace logs a message at level Trace on the standard logger.
func Trace(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.OutputLevel(TraceLevel, 2, s)
}

// Tracef logs a message at level Trace on the standard logger.
func Tracef(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.OutputLevel(TraceLevel, 2, s)
}

// Traceln logs a message at level Trace on the standard logger.
func Traceln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.OutputLevel(TraceLevel, 2, s)
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.
func Output(calldepth int, s string) error {
	return std.OutputLevel(NoneLevel, calldepth+1, s) // +1 for this frame.
}

// OutputLevel writes the output for a logging event with level. The string s
// contains the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not already
// a newline. Calldepth is the count of the number of frames to skip when
// computing the file name and line number if Llongfile or Lshortfile is set;
// a value of 1 will print the details for the caller of Output. Level is the
// log level for the output. If any formatter is configured for the logger,
// it will be used to format the output.
func OutputLevel(level Level, calldepth int, s string) error {
	return std.OutputLevel(level, calldepth+1, s) // +1 for this frame.
}
